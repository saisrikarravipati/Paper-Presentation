




{
  "queues": [
    {
      "name": "serviceA",
      "queue_url": "https://sqs.us-west-2.amazonaws.com/123456789012/queue-A",
      "template_file": "template_A.json",
      "message_count": 50,
      "message_rate": 100
    },
    {
      "name": "serviceB",
      "queue_url": "https://sqs.us-west-2.amazonaws.com/123456789012/queue-B",
      "template_file": "template_B.json",
      "message_count": 50,
      "message_rate": 0
    },
    {
      "name": "serviceC",
      "queue_url": "https://sqs.us-west-2.amazonaws.com/123456789012/queue-C",
      "template_file": "template_C.json",
      "message_count": 50,
      "message_rate": 20
    }
  ]
}


{
  "test-request-id": "PLACEHOLDER",
  "userId":          "user-123",
  "action":          "purchase",
  "itemCount":       3
}




#!/usr/bin/env python3
import os, json, time, uuid
import boto3

def generate_mock_messages(template, count):
    msgs = []
    for _ in range(count):
        m = template.copy()
        m["test-request-id"] = str(uuid.uuid4())
        msgs.append(m)
    return msgs

def write_messages_to_file(msgs, filename):
    with open(filename, "w") as f:
        json.dump(msgs, f, indent=2)
    print(f"→ Wrote {len(msgs)} messages to {filename}")

def send_messages(sqs, queue_url, msgs, batch_size, rate):
    send_times = []
    for i in range(0, len(msgs), batch_size):
        batch = msgs[i:i+batch_size]
        entries = [
          {"Id": str(idx), "MessageBody": json.dumps(b)}
          for idx, b in enumerate(batch)
        ]
        t0 = time.monotonic()
        resp = sqs.send_message_batch(QueueUrl=queue_url, Entries=entries)
        t1 = time.monotonic()
        send_times.append((t1 - t0)*1_000/len(entries))
        if resp.get("Failed"):
            print("!! Failed entries:", resp["Failed"])
        if rate > 0:
            desired = len(entries)/rate
            actual  = time.monotonic() - t1
            if desired > actual:
                time.sleep(desired - actual)
    avg = sum(send_times)/len(send_times)
    print(f"→ Sent {len(msgs)} msgs to {queue_url}; avg send-latency {avg:.2f} ms/msg\n")

def main():
    region = os.getenv("AWS_REGION", "us-west-2")
    cfg_path = os.getenv("QUEUE_CONFIG_PATH", "queue_config.json")
    config = json.load(open(cfg_path))
    sqs = boto3.client("sqs", region_name=region)

    for q in config["queues"]:
        name, url = q["name"], q["queue_url"]
        tmpl = json.load(open(q["template_file"]))
        count, rate = q["message_count"], q["message_rate"]

        print(f"=== Queue '{name}' ===")
        msgs = generate_mock_messages(tmpl, count)
        write_messages_to_file(msgs, f"sample_messages_{name}.json")
        send_messages(sqs, url, msgs, batch_size=10, rate=rate)

if __name__ == "__main__":
    main()



