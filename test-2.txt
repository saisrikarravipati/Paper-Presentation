
--------------------------------

package policy.enforcement.scope

import data.policy.lib.data
import rego.v1

# Constant dates used in the policy.
IN_SCOPE_CUTOFF_DATE := "2024-05-15T00:00:00Z"

# A repository is considered "net new" if its creation date is after 2024-04-01T00:00:00Z.
net_new_cutoff_ns := time.parse_rfc3339_ns("2024-04-01T00:00:00Z")

# Calculate the repository creation timestamp.
# We first try to parse using a custom format, then fall back to RFC3339.
repo_creation_timestamp := ts {
    ts = time.parse_ns("2006-01-02T15:04:05", input.repoCreationDate)
} else := time.parse_rfc3339_ns(input.repoCreationDate)

###############################################################################
# Current Time (Default Only)
###############################################################################
# In production we always use the default current time.
# In tests, we override this value using the "with" keyword.
current_time_ns = time.now_ns()

###############################################################################
# New Computed Values and Flags
###############################################################################

# Flag 1: is_repo_net_new
# True if the repository creation timestamp is after the net new cutoff.
is_repo_net_new = value {
    value = repo_creation_timestamp > net_new_cutoff_ns
}

# Compute the full enforcement date by adding 60 days to the repository creation timestamp.
# 60 days in nanoseconds = 60 * 24 * 3600 * 1e9 = 5184000000000.
full_enforcement_Date = enforcement_due {
    enforcement_due = time.add_ns(repo_creation_timestamp, 5184000000000)
}

# Flag 2: is_repo_fully_enforced
# True if the repo is net new and at least 60 days have passed since repo creation.
is_repo_fully_enforced = value {
    value = (repo_creation_timestamp > net_new_cutoff_ns) and (current_time_ns >= time.add_ns(repo_creation_timestamp, 5184000000000))
}

###############################################################################
# Existing Policy Logic
###############################################################################

results := response if {
    all_decisions := [decision |
        some res in scope_results
        decision := res.decision
    ]
    all_messages := [message |
        some res in scope_results
        message := res.message
    ]
    decision := make_decision(all_decisions)
    response := {
        "policy_name": "Enforcement Scope policy",
        "decision": decision,
        "messages": all_messages,
        "isRepoInEtbScope": ETBinScope,
        # New flags and computed value added to the response:
        "is_repo_net_new": is_repo_net_new,
        "is_repo_fully_enforced": is_repo_fully_enforced,
        "full_enforcement_Date": full_enforcement_Date,
    }
}

scope_results contains decision if {
    in_scope_pipeline = true
    decision := {
        "message": "pass repo app type, date, and flavor in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "true",
    }
}

scope_results contains decision if {
    ETBinScope
    decision := {
        "message": "pass repo in ETB list",
        "policy_name": "Enforcement Scope policy",
        "decision": "true",
    }
}

scope_results contains decision if {
    not ETBinScope
    not lower(input.pipelineAppType) in data.valid_types.valid_pipeline_app_type
    decision := {
        "message": "App type is not application",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

scope_results contains decision if {
    not ETBinScope
    not input.pipelineFlavor in data.scope_flavors
    decision := {
        "message": "Flavor is not in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

scope_results contains decision if {
    not ETBinScope
    out_of_scope_date = true
    decision := {
        "message": "repo is not in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

ETBinScope if {
    lower(input.repoUrl) in data.ETB_list
} else {
    false
}

in_scope_pipeline if {
    lower(input.pipelineAppType) in data.valid_types.valid_pipeline_app_type
    input.pipelineFlavor in data.scope_flavors
    in_scope_date = true
}

in_scope_date if {
    cutoff_time = time.parse_rfc3339_ns(IN_SCOPE_CUTOFF_DATE)
    repo_creation_timestamp >= cutoff_time
}

out_of_scope_date if {
    input.repoCreationDate != ""
    cutoff_time = time.parse_rfc3339_ns(IN_SCOPE_CUTOFF_DATE)
    repo_creation_timestamp < cutoff_time
}

in_scope_date if {
    input.repoCreationDate = ""
}

make_decision(decisions) := result if {
    "false" in decisions
    result := "false"
} else := result if {
    "true" in decisions
    result := "true"
} else := ""  # default value if no decisions match



-----------------------------------


package policy.enforcement.scope_test

import data.policy.enforcement.scope

# Test when the repository is net new and exactly 60 days have passed.
test_net_new_and_fully_enforced {
    creation := "2024-04-02T00:00:00Z"
    # Compute the expected enforcement date: creation + 60 days.
    expected_enforcement := time.add_ns(time.parse_rfc3339_ns(creation), 60 * 24 * 3600 * 1000000000)
    input := {
        "repoCreationDate": creation,
        "repoUrl": "dummy_repo",
        "pipelineAppType": "application",  # assumed valid in data.valid_types.valid_pipeline_app_type
        "pipelineFlavor": "flavorA",         # assumed valid in data.scope_flavors
    }
    net_new := scope.is_repo_net_new with input as input
    fully_enforced := scope.is_repo_fully_enforced with input as input with policy.enforcement.scope.current_time_ns as expected_enforcement
    full_due := scope.full_enforcement_Date with input as input

    net_new == true
    fully_enforced == true
    full_due == expected_enforcement
}

# Test when the repository is net new but less than 60 days have passed.
test_net_new_but_not_fully_enforced {
    creation := "2024-04-02T00:00:00Z"
    # Set simulated current time to 30 days after creation.
    simulated_current := time.add_ns(time.parse_rfc3339_ns(creation), 30 * 24 * 3600 * 1000000000)
    input := {
        "repoCreationDate": creation,
        "repoUrl": "dummy_repo",
        "pipelineAppType": "application",
        "pipelineFlavor": "flavorA",
    }
    net_new := scope.is_repo_net_new with input as input
    fully_enforced := scope.is_repo_fully_enforced with input as input with policy.enforcement.scope.current_time_ns as simulated_current

    net_new == true
    fully_enforced == false
}

# Test when the repository is not net new.
test_not_net_new {
    creation := "2024-03-31T00:00:00Z"
    # Simulated current time set arbitrarily (e.g., 70 days after creation).
    simulated_current := time.add_ns(time.parse_rfc3339_ns(creation), 70 * 24 * 3600 * 1000000000)
    input := {
        "repoCreationDate": creation,
        "repoUrl": "dummy_repo",
        "pipelineAppType": "application",
        "pipelineFlavor": "flavorA",
    }
    net_new := scope.is_repo_net_new with input as input
    fully_enforced := scope.is_repo_fully_enforced with input as input with policy.enforcement.scope.current_time_ns as simulated_current

    net_new == false
    fully_enforced == false
}


------------


