```python
#!/usr/bin/env python3
"""
publish_multi_load.py

This script generates mock messages from templates and publishes them to Onestream
streams using the existing OnestreamClient logic, throttled per-stream to a target TPS.
Configuration is embedded directly as a Python dict. Uses dotenv to load client credentials.
"""
import os
import json
import time
import uuid
import copy
from datetime import datetime
from dotenv import load_dotenv
import onestream_client

# Load environment variables from .env file
load_dotenv()

# Embedded configuration (replacing queue_config.json)
QUEUE_CONFIG = {
    "queues": [
        {
            "name": "jira_test",
            "template_file": os.path.join("templates", "jira_test.json"),
            "message_count": 50,
            "message_rate": 5,
            "stream_config": {
                "SDP_BA": "BAJIRA",
                "SDP_UPSTREAM_ENV": "QA-US-EAST-1",
                # Use dotenv-loaded environment variables
                "client_id": os.getenv("client_id"),
                "client_secret": os.getenv("client_secret"),
                "api_major_version": 1,
                "max_retries": 5,
                "retry_delay_seconds": 5,
                "schema_name": "internal_operation_test_case_management_copy",
                "base_url": "https://api-sdp-it.cloud.capitalone.com"
            }
        },
        {
            "name": "sevenps_test",
            "template_file": os.path.join("templates", "sevenps_test.json"),
            "message_count": 50,
            "message_rate": 5,
            "stream_config": {
                "SDP_BA": "BA7PSTESTPLATFORM",
                "SDP_UPSTREAM_ENV": "QA-US-EAST-1",
                "client_id": os.getenv("client_id"),
                "client_secret": os.getenv("client_secret"),
                "api_major_version": 1,
                "max_retries": 5,
                "retry_delay_seconds": 5,
                "schema_name": "enterprise_test_report_aggregates",
                "base_url": "https://api-sdp-it.cloud.capitalone.com"
            }
        },
        {
            "name": "unit_test",
            "template_file": os.path.join("templates", "unit_test.json"),
            "message_count": 50,
            "message_rate": 5,
            "stream_config": {
                "SDP_BA": "BATESTINGINSIGHTSPLATFORM",
                "SDP_UPSTREAM_ENV": "QA-US-EAST-1",
                "client_id": os.getenv("client_id"),
                "client_secret": os.getenv("client_secret"),
                "api_major_version": 1,
                "max_retries": 5,
                "retry_delay_seconds": 5,
                "schema_name": "enterprise_testing_insights_unit_test_results_data_v5",
                "base_url": "https://api-sdp-it.cloud.capitalone.com"
            }
        }
    ]
}

# Utility functions

def replace_placeholders(obj):
    """
    Recursively replace "PLACEHOLDER" with unique values:
    - "timestamp" in key → ISO8601 UTC timestamp
    - otherwise → UUID
    """
    if isinstance(obj, dict):
        new = {}
        for k, v in obj.items():
            if v == "PLACEHOLDER":
                key_lc = k.lower()
                if "timestamp" in key_lc:
                    new[k] = datetime.utcnow().isoformat() + "Z"
                else:
                    new[k] = str(uuid.uuid4())
            else:
                new[k] = replace_placeholders(v)
        return new
    elif isinstance(obj, list):
        return [replace_placeholders(item) for item in obj]
    else:
        return obj


def generate_mock_messages(template_data, count):
    """
    Generate `count` messages from template_data (dict or list of dicts).
    """
    templates = template_data if isinstance(template_data, list) else [template_data]
    msgs = []
    for i in range(count):
        base = templates[i % len(templates)]
        msg = replace_placeholders(copy.deepcopy(base))
        msgs.append(msg)
    return msgs


def write_messages_to_file(msgs, filename):
    """Write the messages list to a JSON file."""
    with open(filename, "w") as f:
        json.dump(msgs, f, indent=2)
    print(f"→ Wrote {len(msgs)} messages to {filename}")


def send_to_stream(msgs, rate, stream_cfg):
    """
    Publish messages via OnestreamClient.publish_record(), throttled to `rate` msgs/sec.
    """
    # Monkey-patch OnestreamClient module-level config
    onestream_client.config = stream_cfg
    client = onestream_client.OnestreamClient()
    client.init_()

    send_times = []
    batch_size = 10
    total = len(msgs)
    for i in range(0, total, batch_size):
        batch = msgs[i:i + batch_size]
        t0 = time.monotonic()
        resp = client.publish_record(batch)
        t1 = time.monotonic()

        dur = (t1 - t0) * 1000 / len(batch)
        send_times.append(dur)
        if resp.status_code != 200:
            print(f"!! Error {resp.status_code}: {resp.text}")

        if rate > 0:
            desired = len(batch) / rate
            actual = time.monotonic() - t1
            if desired > actual:
                time.sleep(desired - actual)

    avg = sum(send_times) / len(send_times) if send_times else 0
    print(f"→ Published {total} msgs; avg {avg:.2f} ms/msg")


def main():
    for q in QUEUE_CONFIG["queues"]:
        name = q["name"]
        tmpl_file = q["template_file"]
        count = q["message_count"]
        rate = q["message_rate"]
        stream_cfg = q["stream_config"]

        with open(tmpl_file) as tf:
            template_data = json.load(tf)

        msgs = generate_mock_messages(template_data, count)
        write_messages_to_file(msgs, f"sample_messages_{name}.json")

        print(f"=== Publishing to '{name}' at {rate} TPS ===")
        send_to_stream(msgs, rate, stream_cfg)


if __name__ == "__main__":
    main()
```

