import re
from urllib.parse import urlparse

def extract_github_info(github_metadata: dict) -> tuple:
    def extract_segment(url, key):
        parsed_url = urlparse(url)
        
        # Only parse if domain is a known 'github.*capitalone.com'
        if not parsed_url.netloc.startswith("github.") or "capitalone.com" not in parsed_url.netloc:
            return None

        path = parsed_url.path.strip("/")
        if not path:
            return None

        # Updated patterns to allow leftover segments
        api_base_pattern = r"^api/v\d+/repos$"
        api_pattern = r"^api/v\d+/repos/(?P<org_name>[^/]+)(?:/(?P<repo_name>[^/]+))?(?:/.*)?$"
        basic_pattern = r"^(?P<org_name>[^/]+)(?:/(?P<repo_name>[^/]+))?(?:/.*)?$"

        # If path is exactly "api/vX/repos", skip
        if re.match(api_base_pattern, path):
            return None

        # If it looks like an API path, parse accordingly
        api_match = re.match(api_pattern, path)
        if api_match:
            return api_match.group(key)

        # Otherwise, fallback to the basic pattern
        basic_match = re.match(basic_pattern, path)
        if basic_match:
            return basic_match.group(key)

        return None

    github_url = github_metadata.get("github_repository_url", "")

    # If 'github_organization' is already set, use it; else parse from the URL
    github_org = github_metadata.get("github_organization") or extract_segment(github_url, "org_name")
    # Same for 'github_repository_name'
    github_repo = github_metadata.get("github_repository_name") or extract_segment(github_url, "repo_name")

    return github_org, github_repo

