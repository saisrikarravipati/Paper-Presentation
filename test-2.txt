package policy.enforcement.scope

import data.policy.lib.data
import rego.v1

# ---------------------------------------------------------------------
# Existing configuration
# ---------------------------------------------------------------------

IN_SCOPE_CUTOFF_DATE := "2024-05-15T00:00:00Z"

# ---------------------------------------------------------------------
# New logic for repo net-new and full enforcement
# ---------------------------------------------------------------------

# Define the cutoff for a repo to be considered "net new".
net_new_cutoff_ns := time.parse_rfc3339_ns("2024-04-01T00:00:00Z")

# Calculate 60 days in nanoseconds:
# 60 days * 24 hours * 60 minutes * 60 seconds * 1e9 nanoseconds
sixty_days_ns := 60 * 24 * 60 * 60 * 1000000000

# Parse the repoCreationDate. First, try a custom format; if that fails, use RFC3339.
repo_creation_timestamp := parsed_timestamp {
    parsed_timestamp := time.parse_ns("2006-01-02T15:04:05", input.repoCreationDate)
} else {
    time.parse_rfc3339_ns(input.repoCreationDate)
}

# Calculate the full enforcement timestamp by adding 60 days to repo creation.
full_enforcement_ns := repo_creation_timestamp + sixty_days_ns

# Because OPA 0.59.0 lacks formatting functions, we output the raw timestamp.
# Consumers of this policy can format full_enforcement_ns externally if needed.
full_enforcement_Date := full_enforcement_ns

# A repo is considered "net new" if its creation timestamp is after the net-new cutoff.
is_repo_net_new := repo_creation_timestamp > net_new_cutoff_ns

# ---------------------------------------------------------------------
# Determine current time
# ---------------------------------------------------------------------
# Since inline if/else or ternary operators are not available, we use multiple rule bodies.
# We allow an override via input.test_now for testability; otherwise, we use time.now_ns().

current_time_ns = t {
    input.test_now
    t = input.test_now
}
current_time_ns = t {
    not input.test_now
    t = time.now_ns()
}

# ---------------------------------------------------------------------
# Define a function to check if the repo is fully enforced.
# A repo is fully enforced if it is net new and at least 60 days have passed.
# We use multiple rule bodies to avoid inline "and" expressions.
is_repo_fully_enforced() = true {
    is_repo_net_new
    current_time_ns >= full_enforcement_ns
}
is_repo_fully_enforced() = false {
    not is_repo_net_new
}
is_repo_fully_enforced() = false {
    is_repo_net_new
    current_time_ns < full_enforcement_ns
}

# ---------------------------------------------------------------------
# Existing scope and decision logic
# ---------------------------------------------------------------------

results := response {
    all_decisions := [d |
        some res in scope_results
        d := res.decision
    ]
    all_messages := [m |
        some res in scope_results
        m := res.message
    ]
    decision := make_decision(all_decisions)
    response := {
        "policy_name": "Enforcement Scope policy",
        "decision": decision,
        "messages": all_messages,
        "isRepoInEtbScope": ETBinScope,
        # --- New fields added below ---
        "is_repo_net_new": is_repo_net_new,
        "is_repo_fully_enforced": is_repo_fully_enforced(),
        "full_enforcement_Date": full_enforcement_Date,
    }
}

scope_results contains decision {
    in_scope_pipeline
    decision := {
        "message": "pass repo app type, date, and flavor in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "true",
    }
}

scope_results contains decision {
    ETBinScope
    decision := {
        "message": "pass repo in ETB list",
        "policy_name": "Enforcement Scope policy",
        "decision": "true",
    }
}

scope_results contains decision {
    not ETBinScope
    not lower(input.pipelineAppType) in data.valid_types.valid_pipeline_app_type
    decision := {
        "message": "App type is not application",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

scope_results contains decision {
    not ETBinScope
    not input.pipelineFlavor in data.scope_flavors
    decision := {
        "message": "Flavor is not in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

scope_results contains decision {
    not ETBinScope
    out_of_scope_date
    decision := {
        "message": "repo is not in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

ETBinScope {
    lower(input.repoUrl) in data.ETB_list
}

ETBinScope {
    false
}

in_scope_pipeline {
    lower(input.pipelineAppType) in data.valid_types.valid_pipeline_app_type
    input.pipelineFlavor in data.scope_flavors
    in_scope_date
}

in_scope_date {
    cutoff_time := time.parse_rfc3339_ns(IN_SCOPE_CUTOFF_DATE)
    repo_creation_timestamp >= cutoff_time
}

out_of_scope_date {
    input.repoCreationDate != ""
    cutoff_time := time.parse_rfc3339_ns(IN_SCOPE_CUTOFF_DATE)
    repo_creation_timestamp < cutoff_time
}

in_scope_date {
    input.repoCreationDate = ""
}

make_decision(decisions) = result {
    "false" in decisions
    result = "false"
} else {
    "true" in decisions
    result = "true"
} else {
    result = ""
}





-------------------------------------




package policy.enforcement.scope_test

import data.policy.enforcement.scope

test_repo_before_net_new {
    input := {
        "repoCreationDate": "2024-03-01T00:00:00Z",
        "repoUrl": "example.com",
        "pipelineAppType": "application",
        "pipelineFlavor": "scope_flavor",
        "test_now": time.parse_rfc3339_ns("2024-03-15T00:00:00Z")
    }
    result := scope.results with input as input
    result.is_repo_net_new == false
    result.is_repo_fully_enforced == false

    expected_full_enf := time.parse_rfc3339_ns("2024-03-01T00:00:00Z") + (60 * 24 * 60 * 60 * 1000000000)
    result.full_enforcement_Date == expected_full_enf
}

test_repo_net_new_not_fully_enforced {
    input := {
        "repoCreationDate": "2024-04-15T00:00:00Z",
        "repoUrl": "example.com",
        "pipelineAppType": "application",
        "pipelineFlavor": "scope_flavor",
        "test_now": time.parse_rfc3339_ns("2024-05-10T00:00:00Z")  # Less than 60 days after creation.
    }
    result := scope.results with input as input
    result.is_repo_net_new == true
    result.is_repo_fully_enforced == false

    expected_full_enf := time.parse_rfc3339_ns("2024-04-15T00:00:00Z") + (60 * 24 * 60 * 60 * 1000000000)
    result.full_enforcement_Date == expected_full_enf
}

test_repo_fully_enforced {
    input := {
        "repoCreationDate": "2024-04-15T00:00:00Z",
        "repoUrl": "example.com",
        "pipelineAppType": "application",
        "pipelineFlavor": "scope_flavor",
        "test_now": time.parse_rfc3339_ns("2024-07-01T00:00:00Z")  # More than 60 days after creation.
    }
    result := scope.results with input as input
    result.is_repo_net_new == true
    result.is_repo_fully_enforced == true

    expected_full_enf := time.parse_rfc3339_ns("2024-04-15T00:00:00Z") + (60 * 24 * 60 * 60 * 1000000000)
    result.full_enforcement_Date == expected_full_enf
}

