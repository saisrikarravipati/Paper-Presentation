

# …imports and logger setup stay unchanged …

class PostgresDBStorage(SevenPSStorage):
    # ------------------------------------------------------------------ #
    # life-cycle
    # ------------------------------------------------------------------ #

    def __init__(self, config: Dict):
        self.config = config
        self._pool: Optional[AsyncConnectionPool] = None
        self._retry_sleep = float(config.get("retry_sleep_seconds", 30))

        # spin up the background loop first …
        self._loop = asyncio.new_event_loop()
        self._thread = threading.Thread(
            target=self._run_loop_forever, name="postgres-bg-loop", daemon=True
        )
        self._ready = threading.Event()
        self._thread.start()
        if not self._ready.wait(timeout=1):
            raise RuntimeError("Background event-loop never started")

        # …and **then** build the pool *inside* that loop
        self._start_pool()                 # <-- modified

    # ------------------------------------------------------------------ #
    # private helpers
    # ------------------------------------------------------------------ #

    # NEW ────────────────────────────────────────────────────────────────
    async def _create_and_open_pool_async(self, conninfo: str) -> AsyncConnectionPool:
        """
        Runs on the background loop:

        1. build `AsyncConnectionPool`
        2. await `.open()`
        3. return the ready pool
        """
        pool = AsyncConnectionPool(
            conninfo=conninfo,
            min_size=self.config.get("min_connections", 1),
            max_size=self.config.get("max_connections", 5),
            timeout=180,
        )
        await pool.open()
        logger.info(
            "AsyncConnectionPool opened (min=%s max=%s)", pool.min_size, pool.max_size
        )
        return pool

    # CHANGED ────────────────────────────────────────────────────────────
    def _start_pool(self) -> None:
        conninfo = (
            generate_db_conn_info()
            if os.getenv("CLOUD", "LOCAL").upper() == "CLOUD"
            else "host=localhost port=5432 dbname=testinginsightsdb user=user password=password"
        )
        try:
            # build **and** open inside the loop – result is the ready pool
            self._pool = self._run(self._create_and_open_pool_async(conninfo))
        except Exception as exc:  # pragma: no cover
            cyber_logger.log(
                Schema20Event(
                    event_name="Unable to construct/open AsyncConnectionPool",
                    event_severity="ERROR",
                )
            )
            raise DatabaseConnectionError(
                "SEVENPS-COLLECTOR-ERROR: Unable to construct/open AsyncConnectionPool"
            ) from exc

