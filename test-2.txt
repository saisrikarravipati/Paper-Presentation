
package policy.lib.functions

import rego.v1

# Define constants for patterns (ensure literal square brackets are escaped)
end_pattern_1 := `:?--@[0-9]+?\.[0-9]+?.*`
end_pattern_2 := `#[0-9]+?(?:\.[0-9]+)?`
end_pattern_3 := `\(example#[0-9]\)`
start_pattern := `\[[0-9]+?(?:\.[0-9]+?)?:[0-9]+\]`

# is_empty_or_undefined returns true only for empty string, empty object, or empty array.
is_empty_or_undefined(response) = true {
    response == ""
}
is_empty_or_undefined(response) = true {
    response == {}
}
is_empty_or_undefined(response) = true {
    response == []
}
is_empty_or_undefined(response) = false {
    response != "" 
    and response != {} 
    and response != []
}

# match_test_names first sanitizes both test names and then requires that the sanitized
# result name contains the sanitized case name and that the “template” match holds.
match_test_names(test_case_name, test_result_name) = true {
    sanitized_test_case_name := sanitize_test_names(test_case_name)
    sanitized_test_result_name := sanitize_test_names(test_result_name)
    contains(sanitized_test_result_name, sanitized_test_case_name)
    match_sanitized_test_names(sanitized_test_case_name, sanitized_test_result_name)
}
match_test_names(_, _) = false

# match_sanitized_test_names – several bodies, any one of which (via regex.template_match or literal equality)
# qualifies the two names as matching.
match_sanitized_test_names(sanitized_test_case_name, sanitized_test_result_name) = true {
    sanitized_test_case_name == sanitized_test_result_name
}

match_sanitized_test_names(sanitized_test_case_name, sanitized_test_result_name) = true {
    pattern := sprintf("%sS%sF", [sanitized_test_case_name, end_pattern_1])
    regex.template_match(pattern, sanitized_test_result_name, "S", "F")
}

match_sanitized_test_names(sanitized_test_case_name, sanitized_test_result_name) = true {
    pattern := sprintf("%sS%sF", [sanitized_test_case_name, end_pattern_2])
    regex.template_match(pattern, sanitized_test_result_name, "S", "F")
}

match_sanitized_test_names(sanitized_test_case_name, sanitized_test_result_name) = true {
    pattern := sprintf("%sS%sF", [sanitized_test_case_name, end_pattern_3])
    regex.template_match(pattern, sanitized_test_result_name, "S", "F")
}

match_sanitized_test_names(sanitized_test_case_name, sanitized_test_result_name) = true {
    pattern := sprintf("%sS%sF", [start_pattern, sanitized_test_case_name])
    regex.template_match(pattern, sanitized_test_result_name, "S", "F")
}

# If the test name contains a template (i.e. text within "<" and ">")
match_sanitized_test_names(sanitized_test_case_name, sanitized_test_result_name) = true {
    contains(sanitized_test_case_name, "<")
    contains(sanitized_test_case_name, ">")
    substrings := regex.find_all_string_submatch(`<([^>]+)>`, sanitized_test_case_name)
    count({ group |
        some i
        group = substrings[i][1]
        contains(sanitized_test_result_name, group)
    }) == count(substrings)
}

# Similarly, for names with “curly” templates.
match_sanitized_test_names(sanitized_test_case_name, sanitized_test_result_name) = true {
    contains(sanitized_test_case_name, "{")
    contains(sanitized_test_case_name, "}")
    substrings := regex.find_all_string_submatch(`{([^}]+)}`, sanitized_test_case_name)
    count({ group |
        some i
        group = substrings[i][1]
        contains(sanitized_test_result_name, group)
    }) == count(substrings)
}

match_sanitized_test_names(_, _) = false

# sanitize_test_names removes spaces, lowercases the string, and fixes certain Unicode literals.
sanitize_test_names(test_name) = sanitized_test_name {
    lowered_no_spaces_name := lower(replace(test_name, " ", ""))
    unicode_literal_test_name := replace(
        replace(
            replace(lowered_no_spaces_name, "\\u203a", ">"),
        "\\u003e", ">"),
    "\\u003c", "<")
    sanitized_test_name := replace(unicode_literal_test_name, "\\", "")
}

# fmt_number_to_string formats a number to 2 decimal places but strips the decimal part if it’s ".00"
fmt_number_to_string(n) = parts[0] {
    formatted := sprintf("%.2f", [n])
    parts := split(formatted, ".")
    parts[1] == "00"
}
fmt_number_to_string(n) = formatted {
    formatted := sprintf("%.2f", [n])
    parts := split(formatted, ".")
    parts[1] != "00"
}







------------------------------------------------



package policy.lib.functions

import data.policy.lib.functions
import rego.v1

test_is_empty_or_undefined {
    functions.is_empty_or_undefined("")
    not functions.is_empty_or_undefined("data")

    functions.is_empty_or_undefined({})
    not functions.is_empty_or_undefined({"data": "value"})

    functions.is_empty_or_undefined([])
    not functions.is_empty_or_undefined(["data 1", "data 2"])

    not functions.is_empty_or_undefined(null)
}

test_match_test_names {
    test_case_name := "test"
    test_case_name_standard := "test"
    test_case_name_caps := "TEST"
    test_case_name_spaces := " T  E S  T    "
    test_case_name_behave_alt := "test -- @10.13 "
    test_case_name_behave_alt2 := "test - @1.1 testtesttest"
    test_case_name_behave_alt3 := "test - @100.123 testtesttest"
    test_case_name_karate_alt := "[1.1:1] test" 
    test_case_name_karate_alt2 := "[1:1] test"
    test_case_name_karate_alt3 := "[100:321] test "
    test_case_name_karate_alt4 := "[100.299:321] test"
    test_case_name_restassured_alt := "test #1"
    test_case_name_restassured_alt2 := "test #1.1"
    test_case_name_whitespace := " test"
    test_case_scenario_outline := "Test to see if <boolean> is true"
    test_result_scenario_outline := "Test to see if True is true"
    test_result_scenario_outline_false := "Test to see if True is false"
    test_case_name_karate_alt5 := "[1:1] [1:2] test"
    test_case_name_karate_alt6 := "[1:2] test"
    test_capitalSF := "SFtestSF"
    test_SF_base := "SFtestSF"

    functions.match_test_names(test_case_name, test_case_name_standard)
    functions.match_test_names(test_case_name, test_case_name_caps)
    functions.match_test_names(test_case_name, test_case_name_spaces)
    functions.match_test_names(test_case_name, test_case_name_behave_alt)
    functions.match_test_names(test_case_name, test_case_name_behave_alt2)
    functions.match_test_names(test_case_name, test_case_name_behave_alt3)
    functions.match_test_names(test_case_name, test_case_name_karate_alt)
    functions.match_test_names(test_case_name, test_case_name_karate_alt2)
    functions.match_test_names(test_case_name, test_case_name_karate_alt3)
    functions.match_test_names(test_case_name, test_case_name_karate_alt4)
    functions.match_test_names(test_case_name, test_case_name_restassured_alt)
    functions.match_test_names(test_case_name, test_case_name_restassured_alt2)
    functions.match_test_names(test_case_name, test_case_name_whitespace)
    functions.match_test_names(test_case_scenario_outline, test_result_scenario_outline)
    not functions.match_test_names(test_case_scenario_outline, test_result_scenario_outline_false)
    functions.match_test_names(test_case_name_karate_alt6, test_case_name_karate_alt5)
    functions.match_test_names(test_SF_base, test_capitalSF)
}

test_match_test_names_escape {
    test_case_name := "test (test)"
    test_case_name_behave_alt := "test (test) -- @1.1 "
    test_case_name_behave_alt2 := "test (test) -- @1.1 testtesttest"
    test_case_name_behave_alt3 := "test (test) -- @100.123 testtesttest"
    test_case_name_karate_alt := "[1.1:1] test (test)"
    test_case_name_karate_alt2 := "[1:1] test (test)"
    test_case_name_karate_alt3 := "[100:321] test (test)"
    test_case_name_karate_alt4 := "[100.299:321] test (test)"
    test_case_name_restassured_alt := "test (test) #1"

    functions.match_test_names(test_case_name, test_case_name_behave_alt)
    functions.match_test_names(test_case_name, test_case_name_behave_alt2)
    functions.match_test_names(test_case_name, test_case_name_behave_alt3)
    functions.match_test_names(test_case_name, test_case_name_karate_alt)
    functions.match_test_names(test_case_name, test_case_name_karate_alt2)
    functions.match_test_names(test_case_name, test_case_name_karate_alt3)
    functions.match_test_names(test_case_name, test_case_name_karate_alt4)
    functions.match_test_names(test_case_name, test_case_name_restassured_alt)
}

test_match_test_names_example {
    test_case_name := "test (test)"
    test_case_name_example_pattern := "test (test) (example #1)"
    test_case_name_example_pattern2 := "test (test) (example #2)"
    functions.match_test_names(test_case_name, test_case_name_example_pattern)
    functions.match_test_names(test_case_name, test_case_name_example_pattern2)
}

test_match_test_names_false {
    test_case_name := "test"
    test_case_name_bad_prefix := "bad_prefix test"
    test_case_name_bad_suffix := "test bad_suffix"

    not functions.match_test_names(test_case_name, test_case_name_bad_prefix)
    not functions.match_test_names(test_case_name, test_case_name_bad_suffix)
}

test_match_test_names_encoded {
    test_case_name := "<TestId> - Success responses - Calculate ATP - Rule Book"
    test_result_name := "<TestId> - Success responses Calculate ATP - Rule Book"
    functions.match_test_names(test_case_name, test_result_name)
}

test_sanitize_test_case_name_and_test_result_name {
    test_name := "T est Sani tI z"
    sanitized_test_name := functions.sanitize_test_names(test_name)
    sanitized_test_name == "testsanitiz"
}

test_fmt_number_to_string {
    functions.fmt_number_to_string(-50) == "-50"
    functions.fmt_number_to_string(0) == "0"
    functions.fmt_number_to_string(0.5) == "0.50"
    functions.fmt_number_to_string(0.995) == "0.99"
    functions.fmt_number_to_string(0.996) == "1.00"
    functions.fmt_number_to_string(1.9) == "1.90"
    functions.fmt_number_to_string(10.95) == "10.95"
    functions.fmt_number_to_string(100) == "100"
}
