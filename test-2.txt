    async def get_test_set_data(
        self,
        *,
        test_request_id: str = None,
        artifact_id: str = None
    ) -> list[str]:
        # pick exactly one filter
        if artifact_id:
            sql = (
                "SELECT results "
                "FROM sevenps_result_set "
                "WHERE artifact_id = $1"
            )
            params = (artifact_id,)
        elif test_request_id:
            sql = (
                "SELECT results "
                "FROM sevenps_result_set "
                "WHERE test_request_id = $1"
            )
            params = (test_request_id,)
        else:
            raise ValueError("artifact_id or test_request_id is required")

        # ensure pool is open
        await self._ensure_pool_open()

        # run query
        async with self.conn_pool.connection() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(sql, params)
                rows = await cursor.fetchall()

        # no rows â†’ test expects RecordNotFoundException
        if not rows:
            raise RecordNotFoundException(
                "SEVENPS-COLLECTOR-ERROR: No test results found with the provided ID"
            )

        # return list of the first column
        return [r[0] for r in rows]
