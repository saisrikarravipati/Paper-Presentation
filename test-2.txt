# coding: utf-8
"""PostgreSQL storage backend for SevenPS collector (minimal cleanup).

This version keeps the original structure but fixes syntax errors, improves
logging, removes blocking `time.sleep`, and corrects async pool handling.
"""

from __future__ import annotations

import os
import asyncio
from typing import List, Dict, Optional

from psycopg.pool import AsyncConnectionPool
from psycopg.errors import UniqueViolation, DatabaseError as PsycopgDatabaseError

from lib.collectors.sevenps.base_storage import (
    SevenPSStorage,
    RecordNotFoundException,
    DatabaseConnectionError,
    DatabaseError,
)
from lib.logging.logger import get_logger
from lib.cyber_logging import get_cyber_logger
from lib.utils import generate_db_conn_info
from cyber_schema_model import Schema20Event  # adjust import path if needed

logger = get_logger(__name__)
cyber_logger = get_cyber_logger()


class PostgresDBStorage(SevenPSStorage):
    """Lightly‑cleaned async PostgreSQL storage implementation."""

    def __init__(self, config: Dict):
        self.config = config
        self.conn_pool: Optional[AsyncConnectionPool] = None

        is_cloud = os.getenv("CLOUD", "LOCAL").lower() == "true"
        try:
            min_connections = config.get("min_connections", 1)
            max_connections = config.get("max_connections", 5)

            if is_cloud:
                self.conn_pool = AsyncConnectionPool(
                    conninfo=generate_db_conn_info(),
                    min_size=min_connections,
                    max_size=max_connections,
                    open=False,
                    timeout=180,
                )
                logger.debug("Connected to Insights DB (cloud)")
            else:
                self.conn_pool = AsyncConnectionPool(
                    conninfo=(
                        "host=localhost port=5432 dbname=testinginsightsdb "
                        "user=user password=password"
                    ),
                    min_size=min_connections,
                    max_size=max_connections,
                    open=False,
                    timeout=180,
                )
                logger.debug("Connected to Insights DB (local)")
        except Exception as error:
            cyber_logger.log(
                {
                    "event_name": "Unable to connect to DB",
                    "event_severity": "ERROR",
                    "event_outcome": "FAIL",
                }
            )
            raise DatabaseConnectionError(
                "SEVENPS-COLLECTOR-ERROR: Unable to connect to DB"
            ) from error

    # ------------------------------------------------------------------
    # Connection‑pool helpers
    # ------------------------------------------------------------------
    async def _ensure_pool_open(self) -> None:
        if self.conn_pool and self.conn_pool.closed:
            await self.conn_pool.open()
            logger.debug("Connection pool opened")

    async def close(self) -> None:
        if self.conn_pool and not self.conn_pool.closed:
            await self.conn_pool.close()
            logger.debug("Connection pool closed")

    # ------------------------------------------------------------------
    # Low‑level helpers
    # ------------------------------------------------------------------
    async def _execute(self, query: str, params=None) -> None:
        """Helper for INSERT/UPDATE/DELETE."""
        await self._ensure_pool_open()
        async with self.conn_pool.connection() as conn:
            async with conn.cursor() as cursor:
                try:
                    await cursor.execute(query, params)
                    await conn.commit()
                    logger.info("Executed query: %s params: %s", query, params)
                except Exception as exc:
                    logger.error("Unable to execute query: %s", exc)
                    raise

    async def _fetch_all(self, query: str, params=None) -> List[tuple]:
        await self._ensure_pool_open()
        async with self.conn_pool.connection() as conn:
            async with conn.cursor() as cursor:
                try:
                    await cursor.execute(query, params)
                    result = await cursor.fetchall()
                    return result
                except Exception as exc:
                    logger.error("Unable to fetch from DB: %s", exc)
                    raise

    # ------------------------------------------------------------------
    # Public API required by SevenPSStorage
    # ------------------------------------------------------------------
    async def store_test_set_data(self, records: List[Dict]) -> None:  # type: ignore[override]
        if not records:
            raise ValueError("SEVENPS-COLLECTOR-ERROR: No records to store")

        tries = 6
        while tries >= 0:
            try:
                async with self.conn_pool.connection() as conn:
                    async with conn.cursor() as cursor:
                        for record in records:
                            await cursor.execute(
                                """
                                INSERT INTO sevenps_result_set (
                                    repo_url, artifact_url, artifact_name,
                                    artifact_version, test_set_type,
                                    test_request_id, asv, bap,
                                    report_doc, report_source,
                                    traceability_doc, github_org, github_repo,
                                    github_branch, pr_url, pr_id_branch,
                                    pr_source_branch, build_id,
                                    test_type_details, test_run_status
                                )
                                VALUES (
                                    %(repo_url)s, %(artifact_url)s, %(artifact_name)s,
                                    %(artifact_version)s, %(test_set_type)s,
                                    %(test_request_id)s, %(asv)s, %(bap)s,
                                    %(report_doc)s, %(report_source)s,
                                    %(traceability_doc)s, %(github_org)s, %(github_repo)s,
                                    %(github_branch)s, %(pr_url)s, %(pr_id_branch)s,
                                    %(pr_source_branch)s, %(build_id)s,
                                    %(test_type_details)s, %(test_run_status)s
                                )
                                """,
                                record,
                            )
                        await conn.commit()
                        logger.info(
                            "Successfully wrote %d records to sevenps_result_set",
                            len(records),
                        )
                        break  # success
            except UniqueViolation as dup_exc:
                logger.error("Unique Violation when writing to DB: %s", dup_exc)
                raise
            except Exception as exc:
                tries -= 1
                logger.error("Couldn't write record to DB, tries left: %d :: %s", tries, exc)
                if tries < 0:
                    cyber_logger.log(
                        {
                            "event_name": "Unable to write to DB",
                            "event_severity": "ERROR",
                            "event_outcome": "FAILURE",
                        }
                    )
                    raise DatabaseError(
                        f"SEVENPS-COLLECTOR-ERROR: Unable to write record to DB: {exc}"
                    ) from exc
                await asyncio.sleep(30)

    async def get_test_set_data(  # type: ignore[override]
        self,
        test_request_id: Optional[str] = None,
        artifact_id: Optional[str] = None,
    ) -> List:
        if not (artifact_id or test_request_id):
            raise ValueError("Provide artifact_id or test_request_id")

        async with self.conn_pool.connection() as conn:
            async with conn.cursor() as cursor:
                if artifact_id:
                    await cursor.execute(
                        """
                        SELECT results FROM sevenps_result_set
                        WHERE artifact_id = %(artifact_id)s
                        """,
                        {"artifact_id": artifact_id},
                    )
                else:
                    await cursor.execute(
                        """
                        SELECT results FROM sevenps_result_set
                        WHERE test_request_id = %(test_request_id)s
                        """,
                        {"test_request_id": test_request_id},
                    )
                rows = await cursor.fetchall()

        if not rows:
            cyber_logger.log(
                {
                    "event_name": "No test results for provided ID",
                    "event_severity": "ERROR",
                }
            )
            raise RecordNotFoundException(
                "SEVENPS-COLLECTOR-ERROR: No test results found with the provided ID"
            )
        return [row[0] for row in rows]
