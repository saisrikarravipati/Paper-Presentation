#!/usr/bin/env python3
import os
import sys
import psycopg
from psycopg import Error

class DatabaseConnectionError(Exception):
    pass

def connect_to_db():
    """
    Reads the following env vars:
      - _7PS_DB_APP_USERNAME
      - _7PS_DB_APP_PASSWORD
      - test_environment  (DEV or QA)
    and attempts to connect to the insights database.
    Returns a psycopg.Connection on success or raises DatabaseConnectionError.
    """
    user = os.getenv("_7PS_DB_APP_USERNAME")
    pwd  = os.getenv("_7PS_DB_APP_PASSWORD")
    env  = os.getenv("test_environment", "QA").upper()

    if not user or not pwd:
        raise DatabaseConnectionError("Missing _7PS_DB_APP_USERNAME or _7PS_DB_APP_PASSWORD")

    host = (
        "testing-insights-db-batestinginsightsplatform-dev.clouddqt.capitalone.com"
        if env == "DEV"
        else "testing-insights-db-batestinginsightsplatform-qa.clouddqt.capitalone.com"
    )
    dbname = "testinginsightsdb"
    port   = 5432

    try:
        conn = psycopg.connect(
            host=host,
            port=port,
            dbname=dbname,
            user=user,
            password=pwd,
            connect_timeout=5,
            sslmode="require",   # remove or change if your DB doesn’t need SSL
        )
        return conn

    except Error as err:
        # print debug info
        print("⚠️  DB connect failed:", file=sys.stderr)
        print(f"    host   = {host!r}",    file=sys.stderr)
        print(f"    port   = {port!r}",    file=sys.stderr)
        print(f"    dbname = {dbname!r}",  file=sys.stderr)
        print(f"    user   = {user!r}",    file=sys.stderr)
        print(f"    sslmode= {'require'}", file=sys.stderr)
        print(f"    error  = {err!r}",     file=sys.stderr)
        raise DatabaseConnectionError("Unable to connect to DB") from err

def main():
    try:
        conn = connect_to_db()
        print("✅ Connection successful!")
        conn.close()
    except DatabaseConnectionError as e:
        print(f"❌ {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
