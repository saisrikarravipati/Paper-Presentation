

package policy.enforcement.scope

import data.policy.lib.data

###############################################################################
# Constants
###############################################################################

# The date on which a repo is considered to be in scope for ETB
IN_SCOPE_CUTOFF_DATE := "2024-05-15T00:00:00Z"

# If the repo creation date is strictly after this date, it's "net new"
NET_NEW_CUTOFF_DATE := "2024-04-01T00:00:00Z"

# 60 days in nanoseconds
# 60 days * 24 hours/day * 3600 sec/hour * 1e9 ns/sec
SIXTY_DAYS_NS := 60 * 24 * 3600 * 1000000000

###############################################################################
# Repo Creation Timestamp
# - Tries a custom format parse, else uses parse_rfc3339_ns
###############################################################################
repo_creation_timestamp := parsed_custom if {
    parsed_custom := time.parse_ns("2006-01-02T15:04:05", input.repoCreationDate)
} else := parsed_rfc if {
    parsed_rfc := time.parse_rfc3339_ns(input.repoCreationDate)
}

###############################################################################
# Current Time (Overridable in Tests)
# - By default uses system time.now_ns()
# - Must define "default current_time_ns" so that "with current_time_ns as X" works
###############################################################################
default current_time_ns = 0
current_time_ns = time.now_ns()

###############################################################################
# Net-New Cutoff (ns)
###############################################################################
net_new_cutoff_ns := time.parse_rfc3339_ns(NET_NEW_CUTOFF_DATE)

###############################################################################
# 1) Flag: is_repo_net_new
#    True if creation date > 2024-04-01T00:00:00Z
###############################################################################
is_repo_net_new = value if {
    value = repo_creation_timestamp > net_new_cutoff_ns
}

###############################################################################
# 2) Value: full_enforcement_Date
#    = (repoCreationTimestamp + 60 days) as an RFC3339-like string
###############################################################################
full_enforcement_Date = result_str if {
    # Compute the numeric timestamp
    enforced_ts := repo_creation_timestamp + SIXTY_DAYS_NS

    # Extract [year, month, day, hour, minute, second, nsec, weekday]
    date_parts := time.date_ns(enforced_ts)
    [year, month, day, hour, minute, second, _, _] := date_parts

    # Format an ISO8601-like string (UTC "Z" suffix)
    result_str := sprintf("%04d-%02d-%02dT%02d:%02d:%02dZ", [year, month, day, hour, minute, second])
}

###############################################################################
# 3) Flag: is_repo_fully_enforced
#    True if:
#       (a) is_repo_net_new is true
#       (b) current_time >= creation + 60 days
###############################################################################
is_repo_fully_enforced = result if {
    # Condition (a)
    repo_creation_timestamp > net_new_cutoff_ns

    # Condition (b)
    enforced_ts := repo_creation_timestamp + SIXTY_DAYS_NS
    current_time_ns >= enforced_ts

    result = true
} else = result if {
    result = false
}

###############################################################################
# In-Scope Cutoff (ns) for older logic
###############################################################################
in_scope_cutoff_ns := time.parse_rfc3339_ns(IN_SCOPE_CUTOFF_DATE)

###############################################################################
# Existing "ETBinScope" / "in_scope_pipeline" / "scope_results" logic
###############################################################################
ETBinScope if {
    lower(input.repoUrl) in data.ETB_list
} else {
    false
}

in_scope_pipeline if {
    lower(input.pipelineAppType) in data.valid_types.valid_pipeline_app_type
    input.pipelineFlavor in data.scope_flavors
    in_scope_date = true
}

in_scope_date if {
    repo_creation_timestamp >= in_scope_cutoff_ns
}

out_of_scope_date if {
    input.repoCreationDate != ""
    repo_creation_timestamp < in_scope_cutoff_ns
}

in_scope_date if {
    input.repoCreationDate = ""
}

scope_results contains decision if {
    in_scope_pipeline = true
    decision := {
        "message": "pass repo app type, date, and flavor in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "true",
    }
}

scope_results contains decision if {
    ETBinScope
    decision := {
        "message": "pass repo in ETB list",
        "policy_name": "Enforcement Scope policy",
        "decision": "true",
    }
}

scope_results contains decision if {
    not ETBinScope
    not lower(input.pipelineAppType) in data.valid_types.valid_pipeline_app_type
    decision := {
        "message": "App type is not application",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

scope_results contains decision if {
    not ETBinScope
    not input.pipelineFlavor in data.scope_flavors
    decision := {
        "message": "Flavor is not in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

scope_results contains decision if {
    not ETBinScope
    out_of_scope_date = true
    decision := {
        "message": "repo is not in scope",
        "policy_name": "Enforcement Scope policy",
        "decision": "false",
    }
}

###############################################################################
# Final Aggregation: results
# - Adds new flags & computed date to the response
###############################################################################
results := response if {
    all_decisions := [decision |
        some res in scope_results
        decision := res.decision
    ]
    all_messages := [message |
        some res in scope_results
        message := res.message
    ]
    decision := make_decision(all_decisions)

    response := {
        "policy_name": "Enforcement Scope policy",
        "decision": decision,
        "messages": all_messages,

        # Original
        "isRepoInEtbScope": ETBinScope,

        # New
        "is_repo_net_new": is_repo_net_new,
        "is_repo_fully_enforced": is_repo_fully_enforced,
        "full_enforcement_Date": full_enforcement_Date,
    }
}

###############################################################################
# Utility: make_decision
###############################################################################
make_decision(decisions) := result if {
    "false" in decisions
    result := "false"
} else := result if {
    "true" in decisions
    result := "true"
} else := ""



-----------------------------






package policy.enforcement.scope_test

import data.policy.enforcement.scope

###############################################################################
# Helper: add_days_ns
#
# Returns an integer that is "base_timestamp_ns + (days × 24h × 3600 × 1e9)"
###############################################################################
add_days_ns(base_ns, days) = new_ns {
    new_ns := base_ns + days * 24 * 3600 * 1000000000
}

###############################################################################
# Helper: format_ns_to_rfc3339
#
# For comparison, we replicate the same logic as full_enforcement_Date:
# time.date_ns => sprintf => "YYYY-MM-DDTHH:mm:ssZ".
###############################################################################
format_ns_to_rfc3339(ns) = out_str {
    date_parts := time.date_ns(ns)
    [year, month, day, hour, minute, second, _, _] := date_parts
    out_str := sprintf("%04d-%02d-%02dT%02d:%02d:%02dZ", [year, month, day, hour, minute, second])
}

###############################################################################
# Test 1: Repo is net new and EXACTLY 60 days have passed => fully_enforced == true
###############################################################################
test_net_new_and_fully_enforced {
    creation_str := "2024-04-02T00:00:00Z"
    creation_ns := time.parse_rfc3339_ns(creation_str)

    # 60 days from creation
    enforcement_ns := add_days_ns(creation_ns, 60)
    expected_enforcement_date := format_ns_to_rfc3339(enforcement_ns)

    input_data := {
        "repoCreationDate": creation_str,
        "repoUrl": "dummy_repo",
        "pipelineAppType": "application",
        "pipelineFlavor": "flavorA",
    }

    net_new := scope.is_repo_net_new with input as input_data
    fully_enforced := scope.is_repo_fully_enforced 
        with input as input_data 
        with scope.current_time_ns as enforcement_ns
    full_due := scope.full_enforcement_Date with input as input_data

    # Check
    net_new == true
    fully_enforced == true
    full_due == expected_enforcement_date
}

###############################################################################
# Test 2: Repo is net new but only 30 days have passed => fully_enforced == false
###############################################################################
test_net_new_but_not_fully_enforced {
    creation_str := "2024-04-02T00:00:00Z"
    creation_ns := time.parse_rfc3339_ns(creation_str)

    # 60 days from creation, for reference
    enforcement_ns := add_days_ns(creation_ns, 60)
    expected_enforcement_date := format_ns_to_rfc3339(enforcement_ns)

    # We'll simulate current time is creation + 30 days
    current_time_ns_30days := add_days_ns(creation_ns, 30)

    input_data := {
        "repoCreationDate": creation_str,
        "repoUrl": "dummy_repo",
        "pipelineAppType": "application",
        "pipelineFlavor": "flavorA",
    }

    net_new := scope.is_repo_net_new with input as input_data
    fully_enforced := scope.is_repo_fully_enforced
        with input as input_data
        with scope.current_time_ns as current_time_ns_30days
    full_due := scope.full_enforcement_Date with input as input_data

    # Check
    net_new == true
    fully_enforced == false
    full_due == expected_enforcement_date
}

###############################################################################
# Test 3: Repo is NOT net new (creation date <= 2024-04-01) => net_new == false
###############################################################################
test_not_net_new {
    creation_str := "2024-03-31T00:00:00Z"
    creation_ns := time.parse_rfc3339_ns(creation_str)

    # 60 days from that creation
    enforcement_ns := add_days_ns(creation_ns, 60)
    expected_enforcement_date := format_ns_to_rfc3339(enforcement_ns)

    # We'll simulate well past 60 days
    current_time_ns_70days := add_days_ns(creation_ns, 70)

    input_data := {
        "repoCreationDate": creation_str,
        "repoUrl": "dummy_repo",
        "pipelineAppType": "application",
        "pipelineFlavor": "flavorA",
    }

    net_new := scope.is_repo_net_new with input as input_data
    fully_enforced := scope.is_repo_fully_enforced
        with input as input_data
        with scope.current_time_ns as current_time_ns_70days
    full_due := scope.full_enforcement_Date with input as input_data

    # Check
    net_new == false
    fully_enforced == false
    full_due == expected_enforcement_date
}

