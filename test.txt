###########################################################
# automated_test_validation.rego
#
# Eliminates both the "or" keyword *and* the "else" usage
# in partial sets. Instead, we define multiple partial
# rules for `missing_test_case_id`.
###########################################################

package policy.enforcement.TMM.automated_test_validation

import data.policy.lib.data
import data.policy.lib.functions.match_test_names
import data.policy.lib.functions.is_empty_or_undefined
import data.policy.lib.functions.in_array
import data.policy.lib.functions.valid_status
import rego.v1

###########################################################
# 1) Dictionary: testCaseId -> set of statuses
###########################################################
sevenps_entry := {
  t.testCaseId: {
    st |
    test_row := input.sevenps_test_cases[_]
    test_row.testCaseId == t.testCaseId
    st := test_row.status
  } |
  t := input.sevenps_test_cases[_]
}

###########################################################
# 2) All JIRA IDs from traceability_data
###########################################################
traceability_jira_ids := {
  tr.jira_id |
  tr := input.traceability_data[_]
}

###########################################################
# 3) Valid traceability data
#    => items whose jira_id is in input.jira_data
###########################################################
valid_traceability_data := {
  vt |
  vt := input.traceability_data[_]
  vt.jira_id in input.jira_data
}

###########################################################
# 4) Set of test cases from valid_traceability_data
###########################################################
unique_jira_test_cases := {
  testC |
  valid_entry := valid_traceability_data[_]
  testC := valid_entry.test_cases[_]
}

###########################################################
# 5) For each test case, gather statuses from sevenps_entry.
#    If no direct key => fallback to regex-based match.
###########################################################

# Exact match
jira_test_case_statuses[test_case] := statuses if {
  test_case := unique_jira_test_cases[_]
  sevenps_entry[test_case]
  statuses := sevenps_entry[test_case]
}

# Regex fallback
jira_test_case_statuses[test_case] := regex_statuses if {
  test_case := unique_jira_test_cases[_]
  not sevenps_entry[test_case]
  regex_statuses := {
    st |
    row := input.sevenps_test_cases[_].testCaseId
    match_test_names(test_case, row)
    st := sevenps_entry[row][_]
  }
}

###########################################################
# 6) Missing JIRA IDs: in input.jira_data but not in
#    traceability_jira_ids
###########################################################
missing_jira_ids contains jira_id if {
  jira_id := input.jira_data[_]
  not in_array(traceability_jira_ids, jira_id)
}

###########################################################
# 7) Missing test case IDs
#
# Instead of "or", define two partial sets:
#
# A) missing_empty_test_cases: statuses are empty or undefined
# B) missing_invalid_test_cases: statuses exist but none are valid
#
# Then unify them by defining multiple partial-set rules for
# missing_test_case_id:
#    - 1st rule picks up empty
#    - 2nd rule picks up invalid
#
# This way, we do not use "or" or "else" in partial sets.
###########################################################

# 7a) Cases with empty or undefined statuses
missing_empty_test_cases[test_case] if {
  test_case := unique_jira_test_cases[_]
  is_empty_or_undefined(jira_test_case_statuses[test_case])
}

# 7b) Cases with statuses, but no valid status
missing_invalid_test_cases[test_case] if {
  test_case := unique_jira_test_cases[_]
  statuses := jira_test_case_statuses[test_case]
  not is_empty_or_undefined(statuses)
  not valid_status(statuses)
}

# 7c) missing_test_case_id is effectively the union of the two:
missing_test_case_id[test_case] if {
  missing_empty_test_cases[test_case]
}

missing_test_case_id[test_case] if {
  missing_invalid_test_cases[test_case]
}

###########################################################
# 8) Final results object
###########################################################

results["missing_id_automated"] := missing_test_case_id if {
  count(missing_test_case_id) > 0
} else := ""

results["missing_jira_ids"] := missing_jira_ids if {
  count(missing_jira_ids) > 0
} else := []

results["decision"] := "PASS" if {
  count(missing_test_case_id) == 0
  count(missing_jira_ids) == 0
} else := "FAIL"

results["total_traceability_tests"] := test_count if {
  test_count := count(unique_jira_test_cases)
} else := 0

results["valid_traceability_tests"] := valid_count if {
  total_count := count(unique_jira_test_cases)
  missing_count := count(missing_test_case_id)
  valid_count := total_count - missing_count
} else := 0
